require('dotenv').config({ path: '.env' });
const express = require("express");
const cors = require("cors");
const http = require("http");
const flash = require('connect-flash');
const path = require("path");
const cookieParser 	= require('cookie-parser');
//const expressValidator = require('express-validator');
const bodyParser = require('body-parser');
const models = require('./models');
const logger = require('morgan');
const sess = require('express-session');
const store = require('session-memory-store')(sess);
const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;


const ApiError = require("./utils/apiError");
const errorHandler = require("./utils/errorHandler");

/**
 * App Variables
 */
const app = express();
const PORT = process.env.PORT || "8080";


var server = app.listen(app.get('port'), function () {
    models.sequelize.sync({ alter: true }).then(() => {
        console.log('model load');
    }).catch(function (e) {
            console.log(e);
            throw new Error(e);
    });
    console.log('Express server listening on port ' + server.address().port);
});

/* var server = httpsServer.listen(app.get('port'), function () {

    models.sequelize.sync({ alter: true }).then(() => {
        console.log('model load');
    }).catch(function (e) {
            console.log(e);
            throw new Error(e);
    });
    console.log('Express server listening on port ' + server.address().port);
    //debug('Express server listening on port ' + server.address().port);
}); */

///passport
passport.use(new LocalStrategy(function (username, password, done) {
    models.Admin.findOne({ where: { email: username, status: "1" } }).then(async function (data) {
        var user = data;
        if (user === null) {
            return done(null, false, { message: 'Invalid username or password' });
        } else {
            user = data.toJSON();
            const decryptPassword = await utility.encryptHashCode(user.password);
            //if (!bcrypt.compareSync(password, user.password)) {
            if(decryptPassword == password) {
                return done(null, false, { message: 'Invalid  password' });
            } else {
                return done(null, user);
            }
        }
    });
}));


passport.serializeUser(function (user, done) {
    console.log(user.email);
    done(null, user.email);
});

passport.deserializeUser(function (username, done) {
    models.Admin.findOne({ where: { email: username } }).then(function (user) {
        done(null, user);
    });
});

app.use(express.json({limit:'50mb'}));
app.use(express.urlencoded({limit: '50mb'}));

app.use(express.static(path.join(__dirname, "public")));
//app.use(express.urlencoded({extended: false}));
app.use(cookieParser());

app.use(flash());
app.use(bodyParser.json({limit: '50mb'}));
app.use(bodyParser.urlencoded({limit: '50mb', extended: true}));
app.use(cors());
app.use(express.json());



// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');

//app.use(favicon());
app.use(logger('dev'));

//app.use(busboyBodyParser());
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));
//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
app.use(flash());
app.use(sess({
    name: 'nodescratch',
    secret: 'MYSECRETISVERYSECRET',
    store: new store({ expires: 60 * 60 * 1000, debug: true }),
    resave: true,
    saveUninitialized: true
}));
app.use(passport.initialize());
app.use(passport.session());
app.use(express.static('data/img'));


const apiRoutes = require("./routes/api/"+process.env.DEFAULT_API_VERSION);
const authentication = require('./routes/auth');

app.use('/api/' + process.env.DEFAULT_API_VERSION, apiRoutes);
app.use('/auth', authentication);
//const authentication = require('./routes/auth.js');
//app.use('/auth', authentication);



app.all("*", (req, res, next) => {
    next(new ApiError(`The URL ${req.originalUrl} does not exists`, 404));
});

app.use(errorHandler);

app.listen(PORT, () => {
    console.log(`server running on port ${PORT}`);
});

app.use(bodyParser.urlencoded({ extended: false }));
//app.use(expressValidator());


// production error handler
// no stacktraces leaked to user
app.use(function (err, req, res, next) {
    console.log(err);
    res.status(err.status || 500);
    return res.render('errors/404.ejs',
    {
        title: '404 - Page not found !',
    });
});


app.use(function (req, res, next) {
    // Website you wish to allow to connect
    res.setHeader('Access-Control-Allow-Origin', '*');
    // Request methods you wish to allow
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, DELETE');
    // Request headers you wish to allow
    res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');
    // Set to true if you need the website to include cookies in the requests sent
    // to the API (e.g. in case you use sessions)
    res.setHeader('Access-Control-Allow-Credentials', true);
    // Pass to next layer of middleware
    next();
  });


app.use(expressValidator());

module.exports = app;

// Console will print the message
